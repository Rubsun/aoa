from decimal import Decimal, ROUND_HALF_UP

from config.settings import settings
from db.models import Order, ExchangeSettings, User


def round_amount(amount: int) -> int:
    return (amount // 100) * 100


def round_value(value, precision=2):
    return value.quantize(Decimal('1.' + '0' * precision), rounding=ROUND_HALF_UP)


async def full_calculation(order_id: int, bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order = Order.get_by_id(order_id)
        user = User.get(User.user_id == order.user_id)

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–º–µ–Ω–∞
        exchange_settings = ExchangeSettings.get()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã
        if exchange_settings.mode == 'auto':
            base_rates = {
                'USDT/RUB': Decimal(str(exchange_settings.auto_rub_to_usdt)),
                'USDT/THB': Decimal(str(exchange_settings.auto_thb_to_usdt)),
            }
        else:
            base_rates = {
                'USDT/RUB': Decimal(str(exchange_settings.rub_to_usdt)),
                'USDT/THB': Decimal(str(exchange_settings.thb_to_usdt)),
            }

        base_rates['RUB/THB'] = base_rates['USDT/THB'] / base_rates['USDT/RUB']
        base_rates['THB/RUB'] = Decimal(1) / base_rates['RUB/THB']
        base_rates['RUB/USDT'] = Decimal(1) / base_rates['USDT/RUB']
        base_rates['THB/USDT'] = Decimal(1) / base_rates['USDT/THB']

        # –ù–∞—Ü–µ–Ω–∫–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        markup = Decimal(1 + exchange_settings.markup_percentage / 100)
        discount = Decimal('0.95')

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        amount = Decimal(str(order.amount))
        currency = order.currency

        conversion_results = {}
        if currency == 'RUB':
            conversion_results['USDT'] = amount * base_rates['RUB/USDT']
            conversion_results['THB'] = amount * base_rates['RUB/THB']
            client_total = amount * markup
        elif currency == 'THB':
            conversion_results['USDT'] = amount * base_rates['THB/USDT']
            conversion_results['RUB'] = amount * base_rates['THB/RUB']
            client_total = conversion_results['RUB'] * markup
        elif currency == 'USDT':
            conversion_results['RUB'] = amount * base_rates['USDT/RUB']
            conversion_results['THB'] = amount * base_rates['USDT/THB']
            client_total = conversion_results['RUB'] * markup
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {currency}")

        real_total = conversion_results.get('RUB', amount)
        profit = client_total - real_total
        estimated_profit = profit * discount

        message_text = (
                f"üìä <b>–ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.username} ({user.user_id})\n"
                f"üí± –í–∞–ª—é—Ç–∞: {currency}\n"
                f"üíµ –°—É–º–º–∞: {amount} {currency}\n"
                f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üí∏ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n\n"
                f"–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {round_value(client_total)} RUB\n"
                f"–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round_value(real_total)} RUB\n"
                f"–ü—Ä–∏–±—ã–ª—å: +{round_value(profit)} RUB\n"
                f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: +{round_value(estimated_profit)} RUB\n\n"
                f"üìà <b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞:</b>\n"
                f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π: {round_value(base_rates['USDT/RUB'] * markup, 3)} RUB/USDT\n"
                f"–†—ã–Ω–æ—á–Ω—ã–π: {round_value(base_rates['USDT/RUB'] / base_rates['USDT/THB'], 3)} RUB/THB\n"
                f"–û–±—Ä–∞—Ç–Ω—ã–π: {round_value(base_rates['USDT/RUB'] * discount / base_rates['USDT/THB'], 3)} RUB/THB\n\n"
                f"üîÄ <b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b>\n"
                + "\n".join([f"‚Ä¢ {amount} {currency} ‚Üí {round_value(v)} {k}" for k, v in conversion_results.items()])
        )

        await bot.send_message(chat_id=settings.ADMIN_CHAT_ID, text=message_text, parse_mode="HTML")
    except Order.DoesNotExist:
        await bot.send_message(settings.ADMIN_CHAT_ID, f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except User.DoesNotExist:
        await bot.send_message(settings.ADMIN_CHAT_ID, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        await bot.send_message(settings.ADMIN_CHAT_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
        raise
